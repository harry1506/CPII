\documentclass[a4paper,
               parskip=half,
               ]{scrartcl}

\usepackage[bottom=3cm,top=2.5cm,left=3cm,right=2.5cm]{geometry} 

\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage[ngerman]{babel}
\usepackage{amsmath}
\usepackage{color} %red, green, blue, yellow, cyan, magenta, black, white
\definecolor{mylightgray}{rgb}{0.95,0.95,0.95}
\usepackage{listings}
\usepackage{booktabs}

\lstset{ language=Matlab, 
  numbers=left,			
%  numberstyle=\footnotesize, 
  numbersep = 0.5cm,   	% Abstand zwischen Nummer und Code
  framexleftmargin=1cm, % Ramen links weiter ziehen
  xleftmargin=1cm,	  	% Ausrichtung korrigieren
  basicstyle=\footnotesize,
  showstringspaces=false,
  frame=lines,%lines, %leftline
  backgroundcolor=\color{mylightgray},
%  linewidth=0.95\linewidth,
  breaklines=true,
  morekeywords={Smetric},
 }

\usepackage{pgfplots}
    \pgfplotsset{compat=newest}

\title{Computational Physics II - Übung 1}
\author{Harald Krause, Oliver Hatt}
\date{4. Oktober 2013}

\begin{document}
\maketitle

\section*{Aufgabe 1.1}
Es sollte eine reelle, symmetrische Matrix $A$ mit Hilfe der Jacobi Methode in Diagonalform $D = \text{diag}(\lambda_1, \lambda_2,\ldots, \lambda_n)$ überführt werden. Alle Bezeichnungen werden aus dem Script Computational Physics II, Ulli Wolff, WS 2013/14, Modul 22.1 Masterstudiengang Physik entnommen. 

Hierzu werden sukzessive orthogonale Drehungen $P_{pq}$ in jeder möglichen p-q-Ebene durchgeführt. Dies geschieht derart, dass bei jeder Drehung immer in den zwei Nicht-Diagonal\-elementen $a_{pq}$ und $a_{qp}$ Null ensteht.
\begin{align*}
a'_{pq} = a'_{qp}=(c^2-s^2)a_{pq}+s c (a_{pp}-a_{qq})\overset{!}{=}0
\end{align*}

Für die Implementierung wurden wie vorgeschlagen die Formeln (1.27) bis (1.31) mit den auf Seite 9 gegebenen Definitionen von c, s und $\tau$ verwendet. Die dazu nötigen Umformungsschritte werden in Teilaufgabe c) erläutert.

Bei der Drehung in der p-q-Ebenen $A_{neu} = P^T_{pq} A P_{pq}$ verändert die $p$-te und $q$-te Zeile sowie Spalte.
Da die Matrix $A$ symmetrisch ist, und diese Eigenschaft bei Drehung erhalten bleibt, genügt für der Berechnung der resultierenden Elemente ein Durchlauf aller Zeilen. Die Spalteneinräge können so direkt übernommen werden.
Es lässt sich nun beobachten wie pro Iteration die Nichtdiagonalelemente gegen Null streben.

%Außerdem wurden in der Matrix nur die Zeilen mit Hilfe von $i$ durchlaufen und so nur die untere Dreiecksmatrix berechnet (da $p<q$). Da in unserem Fall A symmetrisch ist und wir orthogonale Transformationen durchführen, ergeben sich die selben Elemente für die obere Halbmatrix und es spart Rechenaufwand diese Einträge direkt zu übernehmen.


Die Funktion \texttt{doPpq} erzeugt bei jeder Drehung (jedes $p$-$q$-Paar) eine immer mehr diagonalisierte Matrix, nach dem oben beschriebenen Verfahren.
Die Iterationen über alle $p$-$q$-Paare wird in der Funktion \texttt{myEig} durchgeführt.
Das Programm bricht die Berechnung ab, sobald alle Nichtdiagonalelemente auf Maschinengenauigkeit Null geworden sind, oder die maximale Anzahl der Itterationen erreicht wurde. Wird keine maximale Anzahl angegeben, dann diese auf 1000 Iterationen begrenzt.

\newpage
\lstinputlisting[title=\textbf{doPpq.m}]{doPpq.m}

\lstinputlisting[title=\textbf{myEig.m}]{myEig.m}

\subsection*{a)}
Die Routine wird mit einer zufälligen, symmetrischen Matrix getestet und die Resultate mit der MATLAB-eigenen Funktion \texttt{eig} verglichen.
\lstinputlisting{taskA.m}

Das obige Skript zeigt für $n = 5$ die gleichen Eigenwerte der beiden Funktionen.
\begin{center}
\begin{tabular}{p{1.5cm}lllll}
\toprule
\centering \texttt{myEig} &  -144.8011 &  -30.1247 & -12.2197 &  2.6067 & 17.7609 \\ 
\midrule
\centering \texttt{eig} &  -144.8011 &  -30.1247 & -12.2197 &  2.6067 & 17.7609 \\ 
\bottomrule
\end{tabular} 
\end{center}

auch die grafische Darstellung der Eigenwerte bei $N = 30$ zeigt die Übereinstimmung der Eigenwerten
\begin{center}
\input{CPIIeig.tikz}
\end{center}

\subsection*{b)}
%Für die Berechnung der Eigenvektoren der Matrix $D$ wurden mit der Vorschrift (1.18) parallel die jeweiligen einzelnen Drehmatrizen $P_1 , P_2 , ...$ berechnet und aufeinander angewandt $(P = P_1 \cdot P_2 \cdot ...)$ .\\
%Durch anschließende Multiplikation von $V$ und $V^T$ ergibt sich die Einheitsmatrix und V ist daher orthogonal nach Definition.

Die Eigenvektoren der Matrix $A$ können berechnet werden indem die Gesammtdrehung $V = P_1 \cdot P_2 \ldots$ betrachtet wird. Die Matrizen $P_i = P_{12} \cdot P_{13} \ldots$ beschreiben jeweils die Drehung bei einer Iteration. Gesamtdrehung wird als zweites Argument der Funktion \texttt{myEig} zurückgegeben. 


%Im folgenden Matlab-Code ist die Funktion myEig dargestellt. Sie berechnet die Eigenwerte und die Drehmatrix nach einer vorgebenen Zahl an maximalen Iterationen (bzw. 1000 default). Weiterhin gibt sie die Zahl Zahl der Iterationen zurück für die Anzahl an Iterationen, bis sich die Nicht Diagonalelemente auf Maschinengenauigkeit nicht mehr von Null unterscheiden:\\

Da die Matrix $V$ als Produkt der Einzeldrehungen gebildet wird, ist auch diese orthogonal und erfüllt die Relation $V^T \! A V = D$. Dies wird anhand des folgenden Beispiels gezeigt. Ist $V$ orthogonal, so ergibt das Produkt aus Matrix und ihrer Transponierten die Einheitsmatrix.

\begin{footnotesize}
\begin{align*}
A &= 
\begin{bmatrix}
  -24.7959 & -15.2800 & -19.3882 & -19.4694 \\
  -15.2800 & -23.9580 & -23.7974 &  -9.7149 \\
  -19.3882 & -23.7974 & -33.4879 & -24.2888 \\
  -19.4694 &  -9.7149 & -24.2888 & -27.7005
\end{bmatrix}
\qquad
V =
\begin{bmatrix}
    0.4621 &  -0.2152 &   0.2685 &  -0.8173 \\
    0.4296 &   0.7059 &  -0.5494 &  -0.1234 \\
    0.6038 &   0.1857 &   0.6008 &   0.4899 \\
    0.4871 &  -0.6488 &  -0.5149 &   0.2771 
\end{bmatrix}
\\
D &=
\begin{bmatrix}
  -84.8527  &       0 &        0  &       0 \\
         0  &-16.6335 &        0  &       0 \\
         0  &       0 &   0.4264  &       0 \\
         0  &       0 &        0  & -8.8826 
\end{bmatrix}
\qquad
V^T V =
\begin{bmatrix}
    1.0000  & -0.0000 &   0.0000 &   0.0000 \\
   -0.0000  &  1.0000 &   0.0000 &   0.0000 \\
    0.0000  &  0.0000 &   1.0000 &  -0.0000 \\
    0.0000  &  0.0000 &  -0.0000 &   1.0000
\end{bmatrix}
\end{align*}
\end{footnotesize}

Die Nichtdiagonalelemente des Produkts $V^T V$ liegen in diesem Beispiel in der Größenordnung von $10^{-16}$, entspricht damit \textit{sogut wie} einer Einheitsmatrix.

\subsection*{c)}
Im Folgenden wird auf die Umformungen von (1.19) und (1.20) auf (1.27) und (1.28) eingegangen.\\\\

Aus der Multiplikation von $V$ mit $P$ erhält man (1.19) und (1.20):
\begin{align}
v_{i,p}' &= c\, v_{i,p} - s\,v_{i,q} \label{eq:vipOne} \\
\quad 
v_{i,q}' &= s\, v_{i,p} + c\,v_{i,q} \label{eq:viqOne}
\end{align}

Die Gleichungen (\ref{eq:vipOne}) und (\ref{eq:vipTwo}) ist laut Skript gleich der folgenden Ausdrücke, die auch in \texttt{doPpq} verwendet wurden.
\begin{align}
v_{i,p}' &= v_{i,p} - s\,(v_{i,q} + \tau \, v_{i,p})\\
&= (1 - s \, \tau)\, v_{i,p} - s \, v_{i,q}  \label{eq:vipTwo} \\
v_{i,q}' &= v_{i,q} + s\,(v_{i,p} - \tau \, v_{i,q})\\
&= (1 - s \, \tau)\, v_{i,q} + s \, v_{i,p} \label{eq:viqTwo}
\end{align}
Der Vergleich von (\ref{eq:vipOne}) mit (\ref{eq:vipTwo}) und (\ref{eq:viqOne}) mit (\ref{eq:viqTwo}) zeigt, dass lediglich zu zeigen bleibt, der Koeffizient $(1 - s \, \tau) = c$ ist.

\begin{align*}
1 - s \, \tau & = \frac{1+c}{1+c} - \frac{s^2}{1+c}
&\mbox{mit } \tau := \frac{s}{1 + c} \\
&= \frac{1 - s^2 + c}{1+c}\\
&= \frac{c \, (c+1)}{c+1}
&\mbox{mit } c^2 = 1 - s^2\\
&= c & &\text{  \textbf{qed.}}
\end{align*}
Damit ist gezeigt, dass die Gleichungen äquivalent sind.

\subsection*{d)}
Für eine Matrix der Größe $N$ ist zu überprüfen wie viele Flops für eine komplette Iteration nötig sind.
Im ersten Schritt wird die Abhängigkeit des Rechenaufwands analysiert um diese Abhängigkeit im zweiten Schritt durch einen Zähler im Programm zu überprüfen.

Eine Iteration besteht aus $N (N-1)$ Drehungen. Für eine Drehung werden zunnächst die Parameter $s,c,t$ und $\tau$ bestimmt.
Danach werden für 2 Spalten $(N-2)$ Werte nach Formel \ref{eq:viqOne} bzw. \ref{eq:viqTwo} mit je 2 Multiplikationen berechnet.\\
Demnach verhält sich die die Anzahl der Flops proportional zu $N^3$.
\begin{align*}
\#\text{FLOPS} \simeq \left(\frac{N^2 + N}{2} \right)_\text{Drehungen}
 \left[\, 2_\text{Spalten} \cdot 2\ (N-2) + const \right] \simeq 2\, N^3
\end{align*}

Zur Bestimmung der benötigten Flops wurde ein Zähler, als globale Variable \texttt{flop}, in das Programm implementiert.\\
Für die Auswerung der Flops in Abhängigkeit der Matrixdimension, wird eine Schleife ausgeführt, bei der die Dimension von $n=4$ bis auf $n=50$ erhöht wird und jedes Mal die Multiplikationen gezählt werden. Im logarithmischen Plot kann ein konstanter Exponent verifiziert werden und der Exponent durch einen linearen Fit bestimmt werden.

\begin{center}
\input{flopsIter.tikz}
\end{center}

Die Grafik wurde mit folgendem Skript erstellt:
\lstinputlisting[title=\textbf{N-Abhängigkeit},lastline=26]{taskD.m}



%Im Folgenden nun zum Abschluss das Script für die Berechnungen wurde eine 50 x 50 Zufallsmatrix erzeugt und immer der Dimension entsprechend ein Teil von ihr als A deklariert:\\
%\lstinputlisting{UE01_01a.m}

%\bibliography{CPbib}
%\bibliographystyle{alphadin}

\end{document}

